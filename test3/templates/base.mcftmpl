<%def name="remove(who)">\
tp @e[${who}] @e[tag=death,limit=1]
</%def>

<%def name="increment(count)">\
% if not suppress_loop and var == func:
execute unless score ${var} funcs matches 0.. run function ${var}_init
scoreboard players add ${var} funcs 1
% endif
scoreboard players set ${var} max ${count}
execute unless score ${var} funcs matches 0..${count - 1} run scoreboard players operation ${var} funcs %= ${var} max
</%def>

<%def name="when(i, as_prefix=False)">execute if score ${var} funcs matches ${i}${"" if as_prefix else " run"}</%def>

<%def name="up_down(which, count, x=0, y=4, z=0)">
${increment(2 * count)}\
<% id = Thing(which).full_id() %>
fill ~ ~4 ~ ~ ~${4 + count} ~ minecraft:air
%for i in range(1, count + 1):
${when(i)} fill ~ ~3 ~ ~ ~${3 + i} ~ ${id}
%endfor
%for i in range(count + 1, 2 * count):
${when(i)} fill ~ ~3 ~ ~ ~${3 + (i - count)} ~ ${id}
%endfor
<%doc> Need this kill because sometimes lopping off a thing (sugar_cane) drops an item </%doc>
kill @e[type=item,distance=..10,nbt={Item:{id:"${id}"}}]
</%def>

<%def name="loop(collection)">
${increment(len(collection))}\
% for thing in collection:
${caller.body(when, loop.index, thing)}
% endfor
</%def>

<%def name="bounce(collection)">
<%
    backwards = collection[1:-1]
    backwards.reverse()
    merged = collection + backwards 
%>\
${increment(len(merged))}\
% for thing in merged:
${caller.body(when, loop.index, thing)}\
% endfor
</%def>

<%def name="on_stand(where, mob, nbt='')">
summon armor_stand ${where} {Small:True,Passengers:[{id:${to_id(mob)},CustomName:${text(mob)},${"%s," % nbt if nbt else ""}NoAI:True,Silent:True}]}
</%def>

<%!
    global x, z, x_delta, z_delta, adult_x, adult_z, kid_x, kid_z, rotation, tag_al
    x = z = x_delta = z_delta = adult_x = adult_z = kid_x = kid_z = rotation = 0
    tag_all = ()
%>

<%def name="mobs_init(x_init=None, z_init=None, x_delta_init=None, z_delta_init=None, kid_x_init=None, kid_z_init=None, adult_x_init=None, adult_z_init=None, rotation_init=None, tags_init=())">
<%
    global x, z, x_delta, z_delta, adult_x, adult_z, kid_x, kid_z, rotation, tag_all
    x = z = x_delta = z_delta = adult_x = adult_z = kid_x = kid_z = rotation = 0
    x = x_init if x_init else x
    z = z_init if z_init else z
    x_delta = x_delta_init if x_delta_init else x_delta
    z_delta = z_delta_init if z_delta_init else z_delta
    adult_x = adult_x_init if adult_x_init else adult_x
    adult_z = adult_z_init if adult_z_init else adult_z
    kid_x = kid_x_init if kid_x_init else kid_x
    kid_z = kid_z_init if kid_z_init else kid_z
    rotation = rotation_init if rotation_init else rotation
    tag_all = tags_init
%>
</%def>

<%def name="kid(thing, x, y_add, z, rotation, nbt='', tags=())">\
<% nbt = ",%s" % nbt if nbt else "" %>\
summon ${thing.full_id()} ~${x} ~${2 + y_add} ~${z} {IsBaby:True,Age:-2147483648,Tags:[${",".join(tags + ("kid",))}]${nbt},NoAI:True,Silent:True,Rotation:[${rotation}f,0f]}
</%def>

<%def name="adult(thing, x, y_add, z, rotation, nbt='', tags=())">\
<% nbt = ",%s" % nbt if nbt else "" %>\
summon ${thing.full_id()} ~${x} ~${2 + y_add} ~${z} {CustomName:${text(thing.name)},Tags:[${",".join(tags)}]${nbt},NoAI:True,Silent:True,Rotation:[${rotation}f,0f]}
</%def>

<%def name="mobs(name, id=None, nbt='', tags=(), auto_tag=True, name_kid=False, do_kid=False, do_adult=False, y_add=0)">\
<%
    global x, z, x_delta, z_delta, adult_x, adult_z, kid_x, kid_z, rotation, tag_all
    if not do_kid and not do_adult:
	do_kid = do_adult = True
    thing = Thing(name, id)
    if name_kid:
	nbt = ",%s" % nbt if nbt else ''
	nbt = "CustomName:%s" % (text(name) + nbt)
    if auto_tag:
	tags += (thing.id,)
    if do_kid:
	kid(thing, x + kid_x, y_add, z + kid_z, rotation, nbt, tags + tag_all)
    if do_adult:
	adult(thing, x + adult_x, y_add, z + adult_z, rotation, nbt, tags + tag_all)
    x += x_delta
    z += z_delta
%>\
</%def>

<%def name="crop(stages, which, x, y, z, when, i, thing, name='age')">\
% for s in range(0, 3):
${when(i)} fill ~${x} ~${y} ~${z - s} ~${x + 2} ~${y} ~${z - s} minecraft:${which}[${name}=${stages[(i + s + len(stages)) % len(stages)]}]
% endfor
</%def>

<%def name="stop_clocks()">
setblock 0 1 0 redstone_block
</%def>

<%def name="fencelike(when, i, id, text2, text3='')">\
${when(i)} fill ~ ~2 ~ ~6 ~3 ~5 ${id} replace #v3:fencelike
${when(i)} data merge block ~5 ~2 ~0 {Text2:${text(text2)},Text3:${text(text3)}}
</%def>

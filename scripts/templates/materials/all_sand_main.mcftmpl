<%namespace name="base" file="../base.mcftmpl"/>

<%
blocks = []
slabs = []
stairs = []
walls = []
for thing in ('', 'Red '):
    type = thing + "Sand"
    subtypes = (
	 "%sstone" % type,
	 "Smooth %sstone" % type,
	 "Cut %sstone" % type)
    blocks.append((type, 'Chiseled %sstone' % type) + subtypes)
    slabs.append((None, None) + tuple('%s Slab' % b for b in subtypes))
    stairs.append((None, None) + tuple(('%s Stairs' % b if 'Cut' not in b else None) for b in subtypes))
    walls.append("%sstone Wall" % type)
%>

<%
assert len(blocks) == 2
%>

<%base:loop collection="${range(0, 2)}" args="when,i,thing">
<% fill = 'fill ~0 ~1 ~0 ~10 ~6 ~7' %>\

%for j in range(0, len(blocks[i])):
<%
    o = 1 - i
    pl_id, sl_id, st_id = blocks[i][j], slabs[i][j], stairs[i][j]
    opl_id, osl_id, ost_id = blocks[o][j], slabs[o][j], stairs[o][j]
    pl, sl, st = Thing(pl_id) if pl_id else None, Thing(sl_id) if sl_id else None, Thing(st_id) if st_id else None
    opl, osl, ost = Thing(opl_id) if opl_id else None, Thing(osl_id) if osl_id else None, Thing(ost_id) if ost_id else None
%>
${when(i)} ${fill} ${Thing(walls[i]).id} replace ${Thing(walls[o]).id}

${when(i)} ${fill} ${pl.id} replace ${opl.id}

%if sl:
${when(i)} ${fill} ${sl.id}[type=double] replace ${osl.id}[type=double]
%for t in ("top", "bottom"):
${when(i)} ${fill} ${sl.id}[type=${t}] replace ${osl.id}[type=${t}]
%endfor
%endif

%if st:
%for f in ("north", "east", "west", "south"):
${when(i)} ${fill} ${st.id}[half=${t},facing=${f}] replace ${ost.id}[half=${t},facing=${f}]
%for s in ("inner_left", "inner_right", "outer_left", "outer_right"):
${when(i)} ${fill} ${st.id}[half=${t},facing=${f},shape=${s}] replace ${ost.id}[half=${t},facing=${f},shape=${s}]
%endfor
%endfor
%endif

%endfor

${when(i)} data merge block ~0 ~2 ~3 {Text2:${text(blocks[i][0])}}
</%base:loop>

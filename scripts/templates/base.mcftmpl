<%def name="remove(who)">\
tp @e[${who}] @e[tag=death,limit=1]
</%def>

<%def name="increment(count)">\
% if not suppress_loop and var == func:
execute unless score ${var} funcs matches 0.. run function ${var}_init
scoreboard players add ${var} funcs 1
% endif
scoreboard players set ${var} max ${count}
execute unless score ${var} funcs matches 0..${count - 1} run scoreboard players operation ${var} funcs %= ${var} max
</%def>

<%def name="when(i, as_prefix=False)">execute if score ${var} funcs matches ${i}${"" if as_prefix else " run"}</%def>
<%def name="unless(i, as_prefix=False)">execute unless score ${var} funcs matches ${i}${"" if as_prefix else " run"}</%def>

<%def name="ensure(pos, block, nbt=None)">execute unless block ${pos} ${block} run setblock ${pos} ${block}${'{%s}' % nbt if nbt else ''}</%def>

<%def name="up_down(which, count, x=0, y=4, z=0)">
${increment(2 * count + 1)}\
<% id = Thing(which).full_id() %>
fill ~0 ~4 ~0 ~0 ~${4 + count} ~0 air
%for i in range(1, count + 1):
${when(i)} fill ~0 ~3 ~0 ~0 ~${3 + i} ~0 ${id}[age=1]
${when(i)} data merge block ~1 ~2 ~0 {Text2:${text("Top Stage: 1")}}
%endfor
${when(count + 1)} fill ~0 ~3 ~0 ~0 ~${3 + count} ~0 ${id}[age=1]
${when(count + 1)} setblock ~0 ~${3 + count} ~0 ${id}[age=15]
${when(count + 1)} data merge block ~1 ~2 ~0 {Text2:${text("Top Stage: 15")}}
%for i in range(count + 2, 2 * count + 1):
${when(i)} fill ~0 ~3 ~0 ~0 ~${3 + (i - count - 1)} ~0 ${id}[age=1]
${when(i)} data merge block ~1 ~2 ~0 {Text2:${text("Top Stage: 1")}}
%endfor
<%doc> Need this kill because sometimes lopping off a thing (sugar_cane) drops an item </%doc>
kill @e[type=item,distance=..10,nbt={Item:{id:"${id}"}}]
</%def>

<%def name="loop(collection)">
${increment(len(collection))}\
% for thing in collection:
${caller.body(when, loop.index, thing)}
% endfor
</%def>

<%def name="bounce(collection)">
<%
    backwards = list(collection[1:-1])
    backwards.reverse()
    merged = list(collection) + backwards 
%>\
${increment(len(merged))}\
% for thing in merged:
${caller.body(when, loop.index, thing)}\
% endfor
</%def>

<%!
    global x, y, z, x_delta, z_delta, adult_x, adult_z, kid_x, kid_z, rotation, tag_al
    x = y = z = x_delta = z_delta = adult_x = adult_z = kid_x = kid_z = rotation = 0
    tag_all = ()
%>

<%def name="mobs_init(x_init=None, y_init=None, z_init=None, x_delta_init=None, z_delta_init=None, kid_x_init=None, kid_z_init=None, adult_x_init=None, adult_z_init=None, rotation_init=None, tags_init=())">
<%
    global x, y, z, x_delta, z_delta, adult_x, adult_z, kid_x, kid_z, rotation, tag_all
    x = y = z = x_delta = z_delta = adult_x = adult_z = kid_x = kid_z = rotation = 0
    x = x_init if x_init else x
    y = y_init if y_init else y
    z = z_init if z_init else z
    x_delta = x_delta_init if x_delta_init else x_delta
    z_delta = z_delta_init if z_delta_init else z_delta
    adult_x = adult_x_init if adult_x_init else adult_x
    adult_z = adult_z_init if adult_z_init else adult_z
    kid_x = kid_x_init if kid_x_init else kid_x
    kid_z = kid_z_init if kid_z_init else kid_z
    rotation = rotation_init if rotation_init else rotation
    tag_all = tags_init + (room, room + "_mobs")
%>
</%def>

<%def name="_mob(thing, at_x, y_add, at_z, at_rotation, nbt='', tags=(), when=None, i=None, on_stand=False)">\
<%
    global x, y, z, x_delta, z_delta, adult_x, adult_z, kid_x, kid_z, rotation, tag_all
    nbt = ",%s" % nbt if nbt else ""
    tags += tag_all
%>\
%if when:
${when(i)} \
%endif
%if on_stand:
summon armor_stand ~${at_x} ~${2 + y_add - 1} ~${at_z} {Invisible:true,Small:true,NoGravity:true,Tags:[${",".join(tags)}],PersistenceRequired:True,NoAI:True,Silent:True,Rotation:[${at_rotation}f,0f],Passengers:[{id:"${thing.full_id()}",Tags:[${",".join(tags)},passenger]${nbt},PersistenceRequired:True,NoAI:True,Silent:True,Rotation:[${at_rotation}f,0f]}]}
%else:
summon ${thing.full_id()} ~${at_x} ~${2 + y_add} ~${at_z} {Tags:[${",".join(tags)}]${nbt},PersistenceRequired:True,NoAI:True,Silent:True,Rotation:[${at_rotation}f,0f]}
%endif
</%def>

<%def name="kid(thing, x=None, y_add=None, z=None, rotation=0, nbt='', tags=(), name_kid=True, when=None, i=None, on_stand=False)">\
${_mob(thing, x, y_add, z, rotation,
       commas(nbt, "IsBaby:True,Age:-2147483648", "CustomName:%s" % text(thing.name) if name_id else "",
              "CustomName:%s" % text(thing.name) if name_kid else ""),
       tags + ("kid",), when=when, i=i, on_stand=on_stand)}\
</%def>

<%def name="adult(thing, x=None, y_add=None, z=None, rotation=0, nbt='', tags=(), when=None, i=None, on_stand=False)">\
${_mob(thing, x, y_add, z, rotation, commas(nbt, "CustomName:%s" % text(thing.name)), tags + ("adult",), when=when, i=i, on_stand=on_stand)}\
</%def>

<%def name="mobs(name, id=None, nbt='', tags=(), auto_tag=True, name_kid=True, do_kid=False, do_adult=False, y_add=0, when=None, i=None, on_stand=False)">\
<%
    global x, y, z, x_delta, z_delta, adult_x, adult_z, kid_x, kid_z, rotation, tag_all
    if not do_kid and not do_adult:
	do_kid = do_adult = True
    thing = Thing(name, id)
    if auto_tag:
	tags += (thing.id,)
    if do_kid:
	kid(thing, x + kid_x, y + y_add, z + kid_z, rotation, nbt, tags, name_kid=name_kid, when=when, i=i, on_stand=on_stand)
    if do_adult:
	adult(thing, x + adult_x, y + y_add, z + adult_z, rotation, nbt, tags, when=when, i=i, on_stand=on_stand)
    x += x_delta
    z += z_delta
%>\
</%def>

<%def name="crop(stages, which, x, y, z, when, i, thing, name='age')">\
% for s in range(0, 3):
${when(i)} fill ~${x} ~${y} ~${z - s} ~${x + 2} ~${y} ~${z - s} ${which}[${name}=${stages[(i + s) % len(stages)]}]
% endfor
${when(i)} data merge block ~${x + 3} ~2 ~${z - 1} {Text2:${text("Stage: %d" % stages[(i + 1) % len(stages)])}}
</%def>

<%def name="stop_clocks()">
setblock 0 1 0 redstone_block
</%def>

<%def name="fencelike(when, i, id, text2, text3='')">\
${when(i)} fill ~8 ~3 ~6 ~0 ~2 ~0 ${id} replace #restworld:fencelike
${when(i)} data merge block ~5 ~2 ~0 {Text1:${text("")},Text2:${text(text2)},Text3:${text(text3)},Text4:${text("")}}
</%def>

<%def name="fencelike_thing(when, i, thing)">\
${fencelike(when, i, thing.id, *thing.to_sign_text()[0:1])}
</%def>

<%def name="named_frame_item(thing, name=None, damage=None)">Item:{id:${thing.id},Count:1,tag:{display:{Name:'{"text":"${name if name else thing.name}"}'}${damage if damage else ""}}},Fixed:True</%def>

<%def name="label(x, y, z, txt, item='stone_button', facing=1)">
execute positioned ~${x} ~${y} ~${z} run kill @e[type=item_frame,tag=label,sort=nearest,limit=1,distance=..0.5]
summon item_frame ~${x} ~${y} ~${z} {Invisible:True,Facing:${facing},Tags:[label,${room}],${named_frame_item(Thing(item), txt)}}
</%def>

<%def name="sign(pos, facing, start=0, lines=(), water=False, nbt=None)">
<%
if isinstance(lines, str):
    lines = (lines,)
nbt_add = ',' + nbt if nbt else ''
%>
setblock ${pos} air
%if water:
setblock ${pos} water
%endif
setblock ${pos} oak_wall_sign[facing=${facing}${',waterlogged=true' if water else ''}]{${','.join('Text%d:%s' % (i + start, text(lines[i])) for i in range(0, len(lines)))}${nbt_add}}
</%def>

<%def name="room_sign(facing, start, lines)">
<%
    pos = { "north": "~0 ~6 ~-1", "south": "~0 ~6 ~1", "east": "~1 ~6 ~0", "west": "~-1 ~6 ~0" }[facing]
    rot = { "north": 0, "south": 180, "east": 90, "west": 270 }[facing]
%>
setblock ${pos} air
setblock ${pos} oak_wall_sign[facing=${facing}]{${','.join("Text%d:'%s'" % (i + start, rich_text('<b><i>%s</i></b>' % lines[i])) for i in range(0, len(lines)))}}
scoreboard players set ${var}_goto_rot ${rot}

kill @e[tag=${var}_anchor]
summon armor_stand ~0 ~2 ~0 {PersistenceRequired:True,Rotation:[${rot}f,0f],Tags:[${var}_anchor,anchor],Invisible:true,Small:true}
<%
    room_name = lines[0]
    if room_name.endswith('&'):
	room_name += ' ' + lines[1]
    room_name = room_name.replace(',', '').replace(':', '')
    print(r'${action(r"%s", "%s", "function restworld:%s/_goto")}, ${scribe(r", ")}, %s' % (room_name, room_name, var.replace('_room', ''), '\\'))
%>
</%def>

<%def name="say_scores(*args)">
<%
    parts = '{"text":"scores: "}'
    for s in args:
	parts += ', {"text": " %s="}, {"score":{"name":"%s","objective":"funcs"}}' % (s, s)
%>
tellraw @a [${parts}]
</%def>
